import { useState, useCallback } from 'react'
import { HealthAnalyzer } from '../lib/ai/health-analyzer'
import { 
  reportOperations, 
  medicalDataOperations, 
  analysisOperations 
} from '../lib/supabase/client'
import { UnifiedMedicalData } from '../lib/supabase/types'
import { parseAIAnalysisResult, ParsedAnalysisResult } from '../lib/ai/analysis-parser'

export interface UnifiedAnalysisResult extends ParsedAnalysisResult {
  analysis_type: 'comprehensive' | 'indicators_only' | 'tcm_only' | 'imaging_only'
  rawAIResponse?: string // ÂéüÂßãAIÂìçÂ∫î
}

export function useAIAnalysis() {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisResult, setAnalysisResult] = useState<UnifiedAnalysisResult | null>(null)
  const [error, setError] = useState<string | null>(null)

  const analyzeReport = useCallback(async (
    reportId: string, 
    userId: string, 
    content: string,
    userProfile?: any
  ) => {
    setIsAnalyzing(true)
    setError(null)
    
    try {
      const analyzer = new HealthAnalyzer()
      
      // 1. ËØÜÂà´Êä•ÂëäÁ±ªÂûã
      const reportType = await analyzer.identifyReportType(content)
      
      // 2. Ëß£ÊûêÁªü‰∏ÄÂåªÁñóÊï∞ÊçÆ
      const medicalData = await analyzer.parseUnifiedMedicalData(content, reportType)
      
      // 3. ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì
      await medicalDataOperations.createMedicalData({
        report_id: reportId,
        user_id: userId,
        ...medicalData
      })
      
      // 4. Êõ¥Êñ∞Êä•ÂëäÁä∂ÊÄÅÂíåÁ±ªÂûã
      await reportOperations.updateReportStatus(reportId, 'processing')
      
      // 5. ËøõË°åAIÂàÜÊûê
      const analysisData = await analyzer.analyzeUnifiedReport(medicalData, userProfile)
      
      // 6. Â§ÑÁêÜÊï∞ÂÄºÊåáÊ†á
      if (medicalData.numerical_indicators?.length) {
        await medicalDataOperations.createHealthMetrics(
          reportId, 
          userId, 
          medicalData.numerical_indicators
        )
      }
      
      // 7. ‰øùÂ≠òÂàÜÊûêÁªìÊûú
      const analysis = await analysisOperations.createAnalysis({
        report_id: reportId,
        user_id: userId,
        ai_analysis: JSON.stringify(analysisData),
        structured_data: medicalData,
        key_findings: analysisData.key_findings || {},
        recommendations: analysisData.recommendations || {},
        health_score: analysisData.health_score || 70,
        report_type: reportType,
        analysis_type: 'comprehensive',
        analysis_date: new Date().toISOString()
      })
      
      // 8. Êõ¥Êñ∞Êä•ÂëäÁä∂ÊÄÅ
      await reportOperations.updateReportStatus(reportId, 'completed')
      
      // 9. Â§ÑÁêÜAIÂìçÂ∫îÂπ∂Ëß£Êûê
      let parsedResult: ParsedAnalysisResult
      let parseError = null
      
      if (analysisData.aiResponse) {
        try {
          console.log('üîç ÂºÄÂßãËß£ÊûêAIÂìçÂ∫î...')
          console.log('üìä ÂéüÂßãAIÂìçÂ∫îÈïøÂ∫¶:', analysisData.aiResponse.length)
          console.log('üìù ÂéüÂßãAIÂìçÂ∫îÈ¢ÑËßà:', analysisData.aiResponse.slice(0, 200) + '...')
          
          // Ëß£ÊûêAIÁöÑJSONÂìçÂ∫î
          parsedResult = parseAIAnalysisResult(analysisData.aiResponse)
          console.log('‚úÖ AIÂìçÂ∫îËß£ÊûêÊàêÂäü!')
          
        } catch (err) {
          console.error('‚ùå AIÂìçÂ∫îËß£ÊûêÂ§±Ë¥•:', err)
          parseError = err
          
          // Â∞ùËØï‰ªéÊï∞ÂÄºÊåáÊ†áÊûÑÂª∫Â§áÁî®ÂàÜÊûêÁªìÊûú
          parsedResult = {
            summary: `Âü∫‰∫é${medicalData.numerical_indicators?.length || 0}È°πÊåáÊ†áÁöÑÂÅ•Â∫∑ÂàÜÊûê`,
            healthScore: 70,
            keyFindings: medicalData.numerical_indicators?.filter(i => i.status !== 'normal')
              .map(i => `${i.name}: ${i.value}${i.unit} (${i.status === 'high' ? 'ÂÅèÈ´ò' : i.status === 'low' ? 'ÂÅè‰Ωé' : i.status})`) || [],
            recommendations: {
              immediate: ['ËØ∑Âí®ËØ¢‰∏ì‰∏öÂåªÁîüËé∑ÂèñËØ¶ÁªÜËØäÊñ≠'],
              lifestyle: ['‰øùÊåÅÂÅ•Â∫∑ÁöÑÁîüÊ¥ªÊñπÂºè'],
              diet: ['ÂùáË°°È•ÆÈ£ü'],
              exercise: ['ÈÄÇÈáèËøêÂä®'],
              followUp: ['ÂÆöÊúüÂ§çÊü•']
            },
            riskFactors: medicalData.numerical_indicators?.filter(i => i.status !== 'normal')
              .map(i => ({
                type: i.status === 'high' ? 'ÊåáÊ†áÂÅèÈ´ò' : i.status === 'low' ? 'ÊåáÊ†áÂÅè‰Ωé' : 'ÂºÇÂ∏∏ÊåáÊ†á',
                probability: i.status === 'critical' ? 'È´ò' : '‰∏≠',
                description: `${i.name}: ${i.value}${i.unit} (ÂèÇËÄÉËåÉÂõ¥: ${i.normalRange || 'Êú™Áü•'})`
              })) || [],
            overallStatus: 'ÈúÄË¶ÅÂÖ≥Ê≥®'
          }
        }
      } else {
        // ‰ΩøÁî®ÈªòËÆ§Ëß£Êûê
        parsedResult = {
          summary: analysisData.summary || 'ÂàÜÊûêÂÆåÊàê',
          healthScore: analysisData.health_score || 70,
          keyFindings: [
            medicalData.tcm_diagnosis?.syndrome || '',
            medicalData.tcm_diagnosis?.inspection || '',
            medicalData.tcm_diagnosis?.palpation || ''
          ].filter(Boolean),
          recommendations: {
            immediate: analysisData.recommendations?.immediate || [],
            lifestyle: analysisData.recommendations?.lifestyle || [],
            diet: analysisData.recommendations?.diet || [],
            exercise: analysisData.recommendations?.exercise || [],
            followUp: analysisData.recommendations?.followUp || []
          },
          riskFactors: analysisData.risk_factors || [],
          overallStatus: '‰∏ÄËà¨'
        }
      }

      // 10. Ê†ºÂºèÂåñËøîÂõûÁªìÊûú
      const result: UnifiedAnalysisResult = {
        ...parsedResult,
        analysis_type: 'comprehensive',
        rawAIResponse: analysisData.aiResponse
      }
      
      // Â¶ÇÊûúËß£ÊûêÂá∫Èîô‰ΩÜÊúâÊåáÊ†áÊï∞ÊçÆÔºå‰ªçÁÑ∂ÊòæÁ§∫ÁªìÊûú‰ΩÜÊ∑ªÂä†ÈîôËØØ‰ø°ÊÅØ
      if (parseError && medicalData.numerical_indicators?.length) {
        console.log('‚ö†Ô∏è ‰ΩøÁî®Âü∫‰∫éÊåáÊ†áÁöÑÂ§áÁî®ÂàÜÊûêÁªìÊûú')
        result.summary = `${result.summary} (AIÂàÜÊûêËß£ÊûêÂá∫ÈîôÔºåÊòæÁ§∫Âü∫‰∫é${medicalData.numerical_indicators.length}È°πÊåáÊ†áÁöÑÂ§áÁî®ÂàÜÊûê)`
      }
      
      setAnalysisResult(result)
      
    } catch (err) {
      console.error('‚ùå ÂàÜÊûêÂ§±Ë¥•ËØ¶ÊÉÖ:', err)
      console.error('üîç ÈîôËØØÁ±ªÂûã:', typeof err)
      console.error('üîç ÈîôËØØÂØπË±°:', err)
      
      let errorMessage = 'ÂàÜÊûêËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ'
      
      if (err instanceof Error) {
        errorMessage = err.message
        console.error('üîç ÈîôËØØÊ∂àÊÅØ:', err.message)
        console.error('üîç ÈîôËØØÂ†ÜÊ†à:', err.stack)
      } else if (typeof err === 'string') {
        errorMessage = err
      } else if (err && typeof err === 'object') {
        errorMessage = JSON.stringify(err)
        console.error('üîç ÈîôËØØÂØπË±°JSON:', JSON.stringify(err, null, 2))
      }
      
      setError(errorMessage)
      
      // Êõ¥Êñ∞Êä•ÂëäÁä∂ÊÄÅ‰∏∫Â§±Ë¥•
      try {
        await reportOperations.updateReportStatus(reportId, 'failed')
      } catch (updateError) {
        console.error('‚ùå Êõ¥Êñ∞Êä•ÂëäÁä∂ÊÄÅÂ§±Ë¥•:', updateError)
      }
    } finally {
      setIsAnalyzing(false)
    }
  }, [])

  const clearAnalysis = useCallback(() => {
    setAnalysisResult(null)
    setError(null)
  }, [])

  const reAnalyze = useCallback(async (
    reportId: string,
    userId: string,
    content: string,
    userProfile?: any
  ) => {
    await analyzeReport(reportId, userId, content, userProfile)
  }, [analyzeReport])

  return {
    isAnalyzing,
    analysisResult,
    error,
    analyzeReport,
    clearAnalysis,
    reAnalyze
  }
} 